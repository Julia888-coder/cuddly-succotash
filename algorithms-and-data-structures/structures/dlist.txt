Определение:
Это последовательность связанных узлов, в которой узел хранит ссылку на следующий и предыдущий элемент.

Реализация:
public class DoublyLinkedList<T> : IEnumerable<T>  // двусвязный список
{
	public class DoublyNode<T>
	{
		public T Data { get; set; }
		public DoublyNode<T> Previous { get; set; }
		public DoublyNode<T> Next { get; set; }
		
		public DoublyNode(T data) => Data = data;
	}

	private DoublyNode<T> head;
	private DoublyNode<T> tail;
	private int count;
	
	public int Count => count;
	public bool IsEmpty => count == 0;

	public void Add(T data)
	{
		var node = new DoublyNode<T>(data);
		if (head == null)
			head = node;
		else
		{
			tail.Next = node;
			node.Previous = tail;
		}
		tail = node;
		count++;
	}
	public void AddFirst(T data)
	{
		var node = new DoublyNode<T>(data);
		var temp = head;
		node.Next = temp;
		head = node;
		if (count == 0)
			tail = head;
		else
			temp.Previous = node;
		count++;
	}
	public bool Remove(T data)
	{
		var current = head;

		while (current != null)
		{
			if (current.Data.Equals(data))
				break;
			current = current.Next;
		}
		if (current != null)
		{
			if (current.Next != null)
				current.Next.Previous = current.Previous;
			else
				tail = current.Previous;
			if (current.Previous != null)
				current.Previous.Next = current.Next;
			else
				head = current.Next;
			count--;
			return true;
		}
		return false;
	}

	public void Clear()
	{
		head = null;
		tail = null;
		count = 0;
	}

	public bool Contains(T data)
	{
		var current = head;
		while (current != null)
		{
			if (current.Data.Equals(data))
				return true;
			current = current.Next;
		}
		return false;
	}

	IEnumerator IEnumerable.GetEnumerator() => ((IEnumerable)this).GetEnumerator();

	IEnumerator<T> IEnumerable<T>.GetEnumerator()
	{
		var current = head;
		while (current != null)
		{
			yield return current.Data;
			current = current.Next;
		}
	}

	public IEnumerable<T> BackEnumerator()
	{
		var current = tail;
		while (current != null)
		{
			yield return current.Data;
			current = current.Previous;
		}
	}
}