/* Пример хеш-функции для строк
   В качестве key принимается обычно либо константа, либо tableSize+-1 для 2ойного хеширования
*/
int HashFunctionHorner(string s, int tableSize, int key)
{
    int hashResult = 0;
    for (int i = 0; s[i] != s.Length; ++i)
        hashResult = (key * hashResult + s[i]) % tableSize;
    hashResult = (hashResult * 2 + 1) % tableSize;
    return hashResult;
}

public class Item
{
	public string Key { get; private set; }
	public string Value { get; private set; }

	public Item(string key, string value)
	{
		Key = key;
		Value = value;
	}
}
/// Используется метод цепочек (открытое хеширование). Называется открытым, потому что он позволяет хранить сколь угодно много элементов,
public class HashTable
{
	private readonly byte _maxSize = 255;
	private Dictionary<int, List<Item>> _items = null;
	public IReadOnlyCollection<KeyValuePair<int, List<Item>>> Items => _items?.ToList()?.AsReadOnly();
	public HashTable() => _items = new Dictionary<int, List<Item>>(_maxSize);
	public void Insert(string key, string value)
	{
		if (key.Length > _maxSize)
			throw new ArgumentException($"Максимальная длинна ключа составляет {_maxSize} символов.", nameof(key));
		var item = new Item(key, value);
		var hash = GetHash(item.Key);
		List<Item> hashTableItem = null;
		if (_items.ContainsKey(hash))
		{
			hashTableItem = _items[hash];
			var oldElementWithKey = hashTableItem.SingleOrDefault(i => i.Key == item.Key);
			if (oldElementWithKey != null)
			{
				throw new ArgumentException($"Хеш-таблица уже содержит элемент с ключом {key}. Ключ должен быть уникален.", nameof(key));
			}
			_items[hash].Add(item);
		}
		else
		{
			hashTableItem = new List<Item>{ item };
			_items.Add(hash, hashTableItem);
		}
	}

	public void Delete(string key)
	{
		if (key.Length > _maxSize)
			throw new ArgumentException($"Максимальная длинна ключа составляет {_maxSize} символов.", nameof(key));
		var hash = GetHash(key);
		if (!_items.ContainsKey(hash)) return; 
		var hashTableItem = _items[hash];
		var item = hashTableItem.SingleOrDefault(i => i.Key == key);
		if (item != null)
		{
			hashTableItem.Remove(item);
		}
	}

	public string Search(string key)
	{
		if (key.Length > _maxSize)
			throw new ArgumentException($"Максимальная длинна ключа составляет {_maxSize} символов.", nameof(key));

		var hash = GetHash(key);

		if(!_items.ContainsKey(hash)) { return null; }

		var hashTableItem = _items[hash];

		if (hashTableItem != null)
		{
			var item = hashTableItem.SingleOrDefault(i => i.Key == key);
			if (item != null)
				return item.Value;
		}
		return null;
	}

	private int GetHash(string value)
	{
		if (value.Length > _maxSize)
			throw new ArgumentException($"Максимальная длинна ключа составляет {_maxSize} символов.", nameof(value));
		// В качестве хэша используем длину строки.
		var hash = value.Length;
		return hash;
	}
}
