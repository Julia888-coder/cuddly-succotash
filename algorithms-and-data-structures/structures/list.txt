Определение:
Линейный однонаправленный список — это структура данных, состоящая из элементов одного типа, связанных между собой последовательно посредством указателей. 
Каждый элемент списка имеет указатель на следующий элемент. 
Последний элемент списка указывает на NULL. 
Элемент, на который нет указателя, является первым (головным) элементом списка. 
Здесь ссылка в каждом узле указывает на следующий узел в списке. 
В односвязном списке можно передвигаться только в сторону конца списка. 
Узнать адрес предыдущего элемента, опираясь на содержимое текущего узла, невозможно.

Реализация:
public class LinkedList<T> : IEnumerable<T>
{
	public class Node<T>
	{
		public T Data { get; set; }
		public Node<T> Next { get; set; }
		public Node(T data) => Data = data;
	}

	private Node<T> head;
	private Node<T> tail;
	private int count;
	
	public int Count => count;
	public bool IsEmpty => count == 0;

	public void Add(T data)
	{
		var node = new Node<T>(data);
		if (head == null)
			head = node;
		else
			tail.Next = node;
		tail = node;

		count++;
	}

	public bool Remove(T data)
	{
		var current = head;
		var previous = null;

		while (current != null)
		{
			if (current.Data.Equals(data))
			{
				// Если узел в середине или в конце
				if (previous != null)
				{
					previous.Next = current.Next;
					if (current.Next == null)
						tail = previous;
				}
				else
				{
					head = head.Next;
					if (head == null)
						tail = null;
				}
				count--;
				return true;
			}

			previous = current;
			current = current.Next;
		}
		return false;
	}

	public void Clear()
	{
		head = null;
		tail = null;
		count = 0;
	}
	
	public bool Contains(T data)
	{
		var current = head;
		while (current != null)
		{
			if (current.Data.Equals(data))
				return true;
			current = current.Next;
		}
		return false;
	}

	public void AppendFirst(T data)
	{
		var node = new Node<T>(data);
		node.Next = head;
		head = node;
		if (count == 0)
			tail = head;
		count++;
	}

	IEnumerator IEnumerable.GetEnumerator() => ((IEnumerable)this).GetEnumerator()

	IEnumerator<T> IEnumerable<T>.GetEnumerator()
	{
		var current = head;
		while (current != null)
		{
			yield return current.Data;
			current = current.Next;
		}
	}
}