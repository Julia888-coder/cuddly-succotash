/// Пишем все в одном файле 

#include "TicketExample.h"// Возможно эту строку нужно будет удалить что бы работало
#include <string>
#include <iostream>
using namespace std;

/// <summary>
/// Кароче, ебать структура с данными по билету
/// </summary>
struct RegistrationForm
{
	int Number;
	string Surname;
	string Name;
	string Partonimyc;
};
//Это наша Нода, ебать, узел, если ты русский
struct NodeTwoExample :RegistrationForm
{
	//Это значение ноды
	RegistrationForm val;
	//Указатель на следующую ноду
	NodeTwoExample* next;
	//Указатель на предыдущую
	NodeTwoExample* previos;
	//Я в ахуе, но это конструктор, в который будут совать свои грязные данные н'вахи(другие структуры или кому там это надо)
	NodeTwoExample(RegistrationForm _val)  : val(_val), next(nullptr), previos(nullptr) {}
};
//Структура самого двусвязного списка
struct TwoListExample
{
	//Это у нас первый парень на вписке
	NodeTwoExample* first;
	//Это у нас последний парень на вписке
	NodeTwoExample* last;
	//Тоже конструктор, ага
	TwoListExample() : first(nullptr), last(nullptr) {}
	//Проверка на то, пустой ли список или нет
	bool is_empty() {
		return first == nullptr;
	}
	//печатаем чо у нас в списке
	void print() {
		//Если пусто, то ничего не печатаем
		if (is_empty()) return;
		//Ставим во главу пересчёта первого на вписке
		NodeTwoExample* p = first;
		//Циклим, выписываем, чо там было в стракте
		while (p) { // p != nullptr
			cout << "Number: " << p->val.Number << " ";
			cout << "Surname: " << p->val.Surname << " ";
			cout << "Name: " << p->val.Name << " ";
			cout << "Partonimyc: " << p->val.Partonimyc << endl;
			p = p->next;
		}
		cout << endl;
	}
	
	//А вот и вставочка в середину
	void insert_middle(RegistrationForm _val)
	{
		NodeTwoExample* p = new NodeTwoExample(_val);
		NodeTwoExample* pTemp = first;
		//Если пусто, то просто вставляем
		if (is_empty()) {
			first = p;
			last = p;
			p->previos = nullptr;
			p->next = nullptr;
			return;
		}
		while (p->val.Number > pTemp->val.Number)
		{
			if (pTemp->next == nullptr)
			{
				break;
			}
			pTemp=pTemp->next;
		}
		if (pTemp == first)
		{
			if (p->val.Number > pTemp->val.Number)
			{
				pTemp->next = p;
				p->previos = pTemp;
				return;
			}
			else
			{
				pTemp->previos = p;
				p->next = pTemp;
				first = p;
				return;
			}
			
		}
		else if(pTemp == last)
		{
			if (p->val.Number > pTemp->val.Number)
			{
				pTemp->next = p;
				p->previos = pTemp;
				last = p;
				return;
			}
			else
			{
				pTemp->previos = p;
				p->next = pTemp;
				return;
			}
		}
	}

};

int main()
{
	TwoListExample list;
	RegistrationForm test;
	test.Name = "Test1";
	test.Partonimyc = "Random";
	test.Surname = "Blya";
	test.Number = 4;
	list.insert_middle(test);
	test.Number = 2;
	list.insert_middle(test);
	test.Number = 8;
	list.insert_middle(test);
	test.Number = 12;
	list.insert_middle(test);
	test.Number = 1;
	list.insert_middle(test);
	list.print();
	return 0;
}